using Microsoft.EntityFrameworkCore;
using rmSharp;
using Task = rmSharp.Task;

namespace rmtester
{


    internal class Program
    {
        static void Main(string[] args)
        {
            ////DB.sqLiteFile = "oberhauser-niggl.rmtree";
           DB.sqLiteFile = "empty.rmtree";



            using (var db = new DB())
            {

                Place Waging = db.Places.GetOrMake("Waging", "Waging,Bayern,Deutschland");
                Place Traunstein = db.Places.GetOrMake("Traustein", "Traunstein, Bayern,Deutschland");

                var lutz = db.MakePerson("Niggl", "Lutz", Sex.Male, birthday: new DateTime(1964, 11, 24), Waging);
                var petra = db.MakePerson("Schlagbauer", "Petra", Sex.Female, birthday: DateTime.Parse("21.6.67"), Waging);
                var paula = db.MakePerson("Schlagbauer", "Paula", Sex.Female, birthday: DateTime.Parse("22.10.1999"), Waging);
                var peter = db.MakePerson("Schlabauer", "Peter", Sex.Male, DateTime.Parse("1.1.95"), Traunstein);
                var lotte = db.MakePerson("Test", "Lotte", Sex.Female, DateTime.Parse("2.3.71"), Traunstein);

                var task = new Task()
                {
                    Name = "Check autogenerated person",
                    Details = "Created by rmSharp",
                };

                petra.Events.Add(new PersonEvent { EventType = 2, Date = new RMDate(DateTime.Parse("1999,12,1")), Place = Traunstein });

                lutz.Tasks.Add(task);
                petra.Tasks.Add(task);
                paula.Tasks.Add(task);
                peter.Tasks.Add(task);


                var family1 = new Family(lutz, petra);
                family1.AddChild(paula);
                db.Families.Add(family1);

                var family2 = new Family(lutz, lotte);
                family2.AddChild(peter, relFather: RelationShip.Step, relMother: RelationShip.Birth);
                db.Families.Add(family2);

                family1.Events.Add(new FamilyEvent
                {
                    EventType = db.EventIDs["Marriage"],
                    Date = new RMDate(DateTime.Parse("23.4.1992")),
                    Details = "Ingolstadt, Piuskirche"
                });



                var x = db.SaveChanges();
            }




            using (var db = new DB())
            {
                //new Example.MaleAncestrors().Execute(Surname: "Schlagbauer", Given: "Paula Franziska Christiana");
                //new Example.DecendantTree().Execute("Oberhauser", "Johann");
                //new Example.AddPerson().Execute();
                //new Example.Pedigree().Execute(Surname: "Niggl", Given: "Lutz Günther");
                //new Example.MultiplePrimaryNames().Execute();
                //new Example.MultipleParents().Execute();
            }
        }
    }
    internal static class Helpers
    {
        public static Person MakePerson(this rmContext db, string surname, string given, Sex sex, DateTime birthday, Place place)
        {
            var person = new Person();
            person.Sex = sex;
            person.Names.Add(new Name { Surname = surname, Given = given, IsPrimary = true });
            person.Events.Add(new PersonEvent { EventType = db.EventIDs["Birth"], Date = new RMDate(birthday), Place = place });
            db.Persons.Add(person);

            return person;
        }

               
        public static Place GetOrMake(this DbSet<Place> places, string name, string abbreviation)
        {
            Place? place = places.FirstOrDefault(p => p.Name == name && p.Abbrev == abbreviation); // do we have an entry?
            if (place == null)                                                                     // if not, generate one                 
            {
                place = new Place
                {
                    PlaceType = 0,
                    Name = name,
                    Abbrev = abbreviation
                };
                places.Add(place);
            }
            return place;
        }
    }
}








